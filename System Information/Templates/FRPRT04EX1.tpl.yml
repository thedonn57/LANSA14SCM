Template:
  Name:                    FRPRT04EX1
  Description:             List Style Report - routine EXP$LST

  Source: |
    @@QUESTION PROMPT('Is this function named EXP$LST ?') ANSWER(@@CANS001) EXTEND('This template generates a specific function that MUST be called EXP$LST.' 'Once this function is compiled it can then  be called by the ADVANCED' 'report logic generated by some applications generated by template FRPRT04.' 'If this function is called EXP$LST reply Y to this question. If it is not' 'called EXP$LST, or you do not understand this question, reply N.' 'Use the HELP key for more information.') LOWER(*NO) VALUES(Y N) HELPIDS(HELP010)
    @@IF       COND((*IF @@CANS001 *EQ Y)) GOTO(L20)
    @@COMMENT  '================================================='
    @@COMMENT  ' INVALID USE OF TEMPLATE FRPRT04EX1 TERMINATED   '
    @@COMMENT  '================================================='
    @@GOTO     LABEL(LEN)
    L20: @@LABEL
    @@COMMENT  COMMENT('=======================================================')
    @@COMMENT  COMMENT('Copyright .....: (C) @@COMPANY, 1991 ')
    @@COMMENT  COMMENT('Process .......: @@PROCESS ')
    @@COMMENT  COMMENT('Function ......: @@FUNCTION ')
    @@COMMENT  COMMENT('Created by ....: @@USER    ')
    @@COMMENT  COMMENT('Created on ....: @@DATE at @@TIME ')
    @@COMMENT  COMMENT('Description ...: @@FUNCDES ')
    @@COMMENT  COMMENT('=======================================================')
    FUNCTION   OPTIONS(*DIRECT *DEFERWRITE *LIGHTUSAGE *NOMESSAGES)
    @@COMMENT  'Function Declarations       '
    EXCHANGE   FIELDS(#STD_QSEL #STD_QNAM #EXP_OPTN #EXP_LISTN #EXP_LISTZ) OPTION(*ALWAYS)
    DEFINE     FIELD(#USE_LIST1) REFFLD(#EXP_LISTN) LENGTH(10)
    DEFINE     FIELD(#USE_LIST2) REFFLD(#EXP_LISTN) LENGTH(10)
    DEFINE     FIELD(#WRK_QNAM) REFFLD(#STD_QNAM)
    DEFINE     FIELD(#WRK_QSEL) REFFLD(#STD_QSEL)
    DEFINE     FIELD(#WRK_QSEL5) TYPE(*CHAR) LENGTH(55) REFFLD(#STD_QSEL) TO_OVERLAY(#WRK_QSEL 1)
    DEFINE     FIELD(#OVL_QSEL1) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 1)
    DEFINE     FIELD(#OVL_QSEL2) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 79)
    DEFINE     FIELD(#OVL_QSEL3) TYPE(*CHAR) LENGTH(78) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 157)
    DEFINE     FIELD(#OVL_QSEL4) TYPE(*CHAR) LENGTH(22) REFFLD(#STD_QSEL) TO_OVERLAY(#STD_QSEL 235)
    DEF_LIST   NAME(#EXP_DLIST) FIELDS((#WRK_QNAM *OUTPUT) (#WRK_QSEL5 *OUTPUT)) SEL_ENTRY(#LISTENTRY)
    DEF_LIST   NAME(#EXP_WLST1) FIELDS((#WRK_QNAM)) COUNTER(#LISTCOUNT) TYPE(*WORKING) ENTRYS(200)
    DEF_LIST   NAME(#EXP_WLST2) FIELDS((#WRK_QSEL)) TYPE(*WORKING) ENTRYS(200)
    DEF_COND   NAME(*SAVEALLOW) COND('#EXP_OPTN = Y')
    @@COMMENT  'Initialise some work variables'
    USE        BUILTIN(TCONCAT) WITH_ARGS(#EXP_LISTN 'E$1') TO_GET(#USE_LIST1)
    USE        BUILTIN(TCONCAT) WITH_ARGS(#EXP_LISTN 'E$2') TO_GET(#USE_LIST2)
    @@COMMENT  'Input Expression Details'
    DOUNTIL    COND('(#IO$KEY = RA) *AND (#STD_QSEL *NE *BLANKS)')
    SET_MODE   TO(*DISPLAY)
    IF         COND(*SAVEALLOW)
    CHANGE     FIELD(#STD_INSTR) TO('''Input (or prompt) required selection expression. Press enter to submit report.''')
    ELSE
    CHANGE     FIELD(#STD_INSTR) TO('''Input required selection expression. Press enter to submit report.''')
    ENDIF
    DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUT) (#OVL_QSEL1 *L8 *P2 *NOID *INPUT) (#OVL_QSEL2 *L9 *P2 *NOID *INPUT) (#OVL_QSEL3 *L10 *P2 *NOID *INPUT) (#OVL_QSEL4 *L11 *P2 *NOID *INPUT)) ADD_KEY(*YES *NEXT *SAVEALLOW) PROMPT_KEY(*YES *NEXT *SAVEALLOW) TEXT(('Selection' 7 2) ('Expression . . . .' 7 12)) CURSOR_LOC(*ATFIELD #OVL_QSEL1)
    IF_KEY     WAS(*ADD)
    EXECUTE    SUBROUTINE(EXP_SAVE)
    ELSE
    IF_KEY     WAS(*PROMPT)
    EXECUTE    SUBROUTINE(EXP_PROMPT)
    ENDIF
    ENDIF
    ENDUNTIL
    @@COMMENT  'Return to caller'
    RETURN
    @@COMMENT  '================================================='
    @@COMMENT  'EXP_SAVE  : Save expression with a name          '
    @@COMMENT  '================================================='
    SUBROUTINE NAME(EXP_SAVE)
    @@COMMENT  'Issue a message if no selection present'
    IF_NULL    FIELD(#STD_QSEL)
    MESSAGE    MSGTXT('No selection has been specified yet, so it is not possible to save it.')
    ELSE
    @@COMMENT  'Restore Previously Saved List'
    CLR_LIST   NAMED(#EXP_WLST1)
    CLR_LIST   NAMED(#EXP_WLST2)
    USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST1) TO_GET(#EXP_WLST1)
    USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST2) TO_GET(#EXP_WLST2)
    @@COMMENT  'Input new / replacement list details'
    DOUNTIL    COND('(#STD_QNAM *NE *BLANKS) *AND (#STD_QSEL *NE *BLANKS)')
    CHANGE     FIELD(#STD_INSTR) TO('''Specify or change details as required. Press enter to save/replace details.''')
    DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUTPUT) (#OVL_QSEL1 *L8 *P2 *NOID *INPUT) (#OVL_QSEL2 *L9 *P2 *NOID *INPUT) (#OVL_QSEL3 *L10 *P2 *NOID *INPUT) (#OVL_QSEL4 *L11 *P2 *NOID *INPUT) (#STD_QNAM *L14 *P31 *NOID *INPUT)) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) TEXT(('Selection' 7 2) ('Expression . . . .' 7 12) ('Saved' 14 2) ('Expression' 14 8) ('Name  . . .' 14 19)) CURSOR_LOC(*ATFIELD #STD_QNAM)
    ENDUNTIL
    @@COMMENT  'Attempt to locate details'
    LOC_ENTRY  IN_LIST(#EXP_WLST1) WHERE('#STD_QNAM = #WRK_QNAM') RET_NUMBER(#LISTENTRY)
    @@COMMENT  'If found, replace'
    IF_STATUS  IS(*OKAY)
    GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
    CHANGE     FIELD(#WRK_QSEL) TO(#STD_QSEL)
    UPD_ENTRY  IN_LIST(#EXP_WLST2)
    MESSAGE    MSGTXT('The list of saved expressions has been updated with your changes')
    @@COMMENT  'Else try to insert (if space available)'
    ELSE
    IF         COND('#LISTCOUNT *GE #EXP_LISTZ')
    MESSAGE    MSGTXT('Space allowed to save expressions is full .... your expression cannot be saved')
    ELSE
    CHANGE     FIELD(#WRK_QNAM) TO(#STD_QNAM)
    CHANGE     FIELD(#WRK_QSEL) TO(#STD_QSEL)
    ADD_ENTRY  TO_LIST(#EXP_WLST1)
    ADD_ENTRY  TO_LIST(#EXP_WLST2)
    MESSAGE    MSGTXT('Your new expression has been added to the list of saved expressions')
    ENDIF
    ENDIF
    @@COMMENT  'Delete and replace the list'
    USE        BUILTIN(DELETE_SAVED_LIST) WITH_ARGS(#USE_LIST1)
    USE        BUILTIN(DELETE_SAVED_LIST) WITH_ARGS(#USE_LIST2)
    USE        BUILTIN(SAVE_LIST) WITH_ARGS(#EXP_WLST1  20 'P' 0 #USE_LIST1) TO_GET(#USE_LIST1)
    USE        BUILTIN(SAVE_LIST) WITH_ARGS(#EXP_WLST2 256 'P' 0 #USE_LIST2) TO_GET(#USE_LIST2)
    ENDIF
    CHANGE     FIELD(#IO$KEY) TO(*NULL)
    ENDROUTINE
    @@COMMENT  '================================================='
    @@COMMENT  'EXP_PROMPT : Prompt a saved expression '
    @@COMMENT  '================================================='
    SUBROUTINE NAME(EXP_PROMPT)
    @@COMMENT  'Restore Previously Saved List'
    CLR_LIST   NAMED(#EXP_WLST1)
    CLR_LIST   NAMED(#EXP_WLST2)
    USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST1) TO_GET(#EXP_WLST1)
    USE        BUILTIN(RESTORE_SAVED_LIST) WITH_ARGS(#USE_LIST2) TO_GET(#EXP_WLST2)
    @@COMMENT  'If list is empty'
    IF_NULL    FIELD(#LISTCOUNT)
    MESSAGE    MSGTXT('There are currently no saved expressions for you to select from')
    @@COMMENT  'else display and allow selection'
    ELSE
    CLR_LIST   NAMED(#EXP_DLIST)
    CHANGE     FIELD(#LISTENTRY) TO(*NULL)
    SELECTLIST NAMED(#EXP_WLST1)
    CHANGE     FIELD(#LISTENTRY) TO('#LISTENTRY + 1')
    GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
    ADD_ENTRY  TO_LIST(#EXP_DLIST)
    ENDSELECT
    DOUNTIL    COND('#LISTENTRY *GT 0')
    CHANGE     FIELD(#STD_INSTR) TO('''Position cursor on saved expression and press enter to select.''')
    DISPLAY    FIELDS((#STD_INSTR *L5 *P2 *NOID *OUT)) BROWSELIST(#EXP_DLIST) EXIT_KEY(*NO) MENU_KEY(*YES *RETURN) PROMPT_KEY(*NO) CURSOR_LOC(*ATFIELD #STD_INSTR)
    @@COMMENT  'If entry selected get details and finish'
    IF         COND('#LISTENTRY *GT 0')
    GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST1)
    GET_ENTRY  NUMBER(#LISTENTRY) FROM_LIST(#EXP_WLST2)
    CHANGE     FIELD(#STD_QNAM) TO(#WRK_QNAM)
    CHANGE     FIELD(#STD_QSEL) TO(#WRK_QSEL)
    ENDIF
    ENDUNTIL
    ENDIF
    CHANGE     FIELD(#IO$KEY) TO(*NULL)
    ENDROUTINE
    LEN: @@LABEL

  Help Panels:
  - HELP010:
      Description:        "   About Template FRPRT04EX1"

      Text: |
        <-
                                                                                        
         This template is a "one time" template. It is used to generate just one        
         function that must be called EXP$LST, into one and only one process on your    
         system. The generated function (called EXP$LST) may then be called by RDML     
         logic generated by its "parent" template FRPRT04. In summary, the key points   
         about this template are :                                                      
                                                                                        
            1. Normally it would be used just once.                                     
            2. The function that it generates must be called EXP$LST.                   
            3. It will then be called by logic generated by its "parent" FRPRT04.       
            4. The generated function is used to save and prompt OPNQRYF selection      
               expressions as working lists using SAVE_LIST and RESTORE_SAVED_LIST.     
            5. Calls to this function are only generated by FRPRT04 when the user       
               has nominated ADVANCED report production and also has specifically       
               indicated that saving and prompting of selection expressions is to       
               be supported.                                                            
            6. After using this template you should compile the resulting function.     
            7. You should then input some function level help text that describes the   
               saving and prompting of selection expressions.                           
            8. See template FRPRT04 for more information about ADVANCED reporting.
